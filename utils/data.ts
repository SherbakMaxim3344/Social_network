import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –í Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ /app/shared/data
// –ù–∞ —Ö–æ—Å—Ç–µ —ç—Ç–æ ./shared/data
const DATA_DIR = process.env.NODE_ENV === 'production' 
  ? '/app/shared/data'  // –í Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
  : path.join(__dirname, '../../../shared/data'); // –ù–∞ —Ö–æ—Å—Ç–µ –ø—Ä–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ

export const DEFAULT_AVATAR = '/images/default-avatar.png';

console.log('üìÅ DATA_DIR:', DATA_DIR);

export const readJSON = async <T>(filename: string): Promise<T[]> => {
  try {
    const filePath = path.join(DATA_DIR, filename);
    console.log(`üìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ${filePath}`);
    const data = await fs.readFile(filePath, 'utf8');
    return JSON.parse(data) as T[];
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${filename}:`, error);
    return [];
  }
};

export const writeJSON = async <T>(filename: string, data: T[]): Promise<boolean> => {
  try {
    const filePath = path.join(DATA_DIR, filename);
    console.log(`üíæ –ó–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞: ${filePath}`);
    await fs.writeFile(filePath, JSON.stringify(data, null, 2));
    console.log(`‚úÖ –§–∞–π–ª ${filename} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω`);
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ ${filename}:`, error);
    return false;
  }
};