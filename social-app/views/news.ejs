<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="/css/style.css" rel="stylesheet">
    <link href="/css/news.css" rel="stylesheet">
    <style>
        .news-feed {
            max-height: 70vh;
            overflow-y: auto;
        }
        .post-content {
            line-height: 1.6;
            white-space: pre-wrap;
        }
        .like-btn.liked {
            background-color: #0d6efd;
            border-color: #0d6efd;
            color: white;
        }
        .comments-section {
            display: none;
            margin-top: 15px;
            padding-top: 15px;
            border-top: 1px solid #e9ecef;
        }
        .fade-in {
            animation: fadeIn 0.5s ease-in;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .new-post-indicator {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 10px;
            text-align: center;
            border-radius: 10px;
            margin-bottom: 15px;
            cursor: pointer;
            display: none;
        }
        .loading-spinner {
            display: none;
            text-align: center;
            padding: 20px;
        }
        .comment {
            padding: 8px;
            border-radius: 5px;
            background-color: #f8f9fa;
            margin-bottom: 8px;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="/news/<%= user.id %>">–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å</a>
            <div class="navbar-nav ms-auto">
                <div class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle text-white" href="#" role="button" data-bs-toggle="dropdown">
                        <img src="<%= user.avatar || defaultAvatar %>" class="user-avatar me-2">
                        <%= user.name %>
                    </a>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="/profile/<%= user.id %>">üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</a></li>
                        <li><a class="dropdown-item" href="/friends/<%= user.id %>">ü§ù –î—Ä—É–∑—å—è</a></li>
                        <li><a class="dropdown-item" href="/news/<%= user.id %>">üì∞ –õ–µ–Ω—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π</a></li>
                        <% if (user.role === 'admin') { %>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item" href="https://localhost:3444" target="_blank">‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</a></li>
                        <% } %>
                        <li><hr class="dropdown-divider"></li>
                        <li><a class="dropdown-item text-danger" href="/">üö™ –í—ã–π—Ç–∏</a></li>
                    </ul>
                </div>
            </div>
        </div>
    </nav>

    <div class="container mt-4 fade-in">
        <div class="row">
            <div class="col-md-8 mx-auto">
                <!-- –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ -->
                <div class="card mb-4" id="show-post-form-btn">
                    <div class="card-body text-center">
                        <button class="btn btn-primary btn-lg" id="show-post-form">
                            ‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç
                        </button>
                    </div>
                </div>

                <div class="card mb-4" id="post-form" style="display: none;">
                    <div class="card-body">
                        <h5 class="card-title">–ß—Ç–æ —É –≤–∞—Å –Ω–æ–≤–æ–≥–æ?</h5>
                        <form id="new-post-form">
                            <div class="mb-3">
                                <textarea class="form-control" name="content" rows="3" 
                                          placeholder="–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏..." 
                                          id="post-content"
                                          required></textarea>
                            </div>
                            <div class="d-flex gap-2">
                                <button type="submit" class="btn btn-primary" id="submit-post">
                                    –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
                                </button>
                                <button type="button" class="btn btn-secondary" id="cancel-post">
                                    –û—Ç–º–µ–Ω–∞
                                </button>
                            </div>
                        </form>
                    </div>
                </div>

                <!-- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ -->
                <div class="new-post-indicator" id="new-post-indicator">
                    üì¢ –ï—Å—Ç—å –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã! <u>–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å</u>
                </div>

                <!-- –°–ø–∏–Ω–Ω–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ -->
                <div class="loading-spinner" id="loading-spinner">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                    </div>
                    <p class="mt-2">–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–µ–Ω—Ç—ã...</p>
                </div>

                <!-- –õ–µ–Ω—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π -->
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h4>–õ–µ–Ω—Ç–∞ –Ω–æ–≤–æ—Å—Ç–µ–π</h4>
                    <span class="badge bg-primary" id="posts-count"><%= posts.length %> –∑–∞–ø–∏—Å–µ–π</span>
                </div>
                
                <div class="news-feed" id="news-feed">
                    <% if (posts.length === 0) { %>
                        <div class="alert alert-info text-center">
                            <h5>–ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π</h5>
                            <p class="mb-0">–î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–∑–µ–π –∏–ª–∏ –æ–ø—É–±–ª–∏–∫—É–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç!</p>
                        </div>
                    <% } else { %>
                        <% posts.forEach(post => { %>
                            <div class="post-card mb-3" data-post-id="<%= post.id %>">
                                <div class="card">
                                    <div class="card-body">
                                        <div class="user-info d-flex align-items-center mb-3">
                                            <img src="<%= post.author.avatar || defaultAvatar %>" 
                                                 class="user-avatar me-3" 
                                                 alt="<%= post.author.name %>">
                                            <div>
                                                <h6 class="mb-0"><%= post.author.name %></h6>
                                                <small class="text-muted post-date">
                                                    <%= new Date(post.createdAt).toLocaleString('ru-RU') %>
                                                </small>
                                            </div>
                                        </div>
                                        <p class="mb-3 post-content"><%= post.content %></p>
                                        <div class="d-flex gap-3">
                                            <button class="btn btn-outline-primary btn-sm like-btn <%= post.liked ? 'liked' : '' %>" 
                                                    data-post-id="<%= post.id %>">
                                                <%= post.liked ? '‚ù§Ô∏è' : 'ü§ç' %> <span class="likes-count"><%= post.likes || 0 %></span>
                                            </button>
                                            <button class="btn btn-outline-secondary btn-sm comments-btn"
                                                    data-post-id="<%= post.id %>">
                                                üí¨ –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å
                                            </button>
                                        </div>

                                        <!-- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ -->
                                        <div class="comments-section" id="comments-<%= post.id %>">
                                            <div class="comments-list mb-2">
                                                <% if (post.comments && post.comments.length > 0) { %>
                                                    <% post.comments.forEach(comment => { %>
                                                        <div class="comment mb-2">
                                                            <strong><%= comment.author ? comment.author.name : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' %>:</strong> 
                                                            <%= comment.content %>
                                                            <small class="text-muted ms-2">
                                                                <%= new Date(comment.createdAt).toLocaleString('ru-RU') %>
                                                            </small>
                                                        </div>
                                                    <% }); %>
                                                <% } else { %>
                                                    <div class="text-muted">–ü–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</div>
                                                <% } %>
                                            </div>
                                            <div class="input-group">
                                                <input type="text" class="form-control comment-input" 
                                                       placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..."
                                                       data-post-id="<%= post.id %>">
                                                <button class="btn btn-primary add-comment" 
                                                        data-post-id="<%= post.id %>">
                                                    –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        <% }); %>
                    <% } %>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        const currentUserId = <%- JSON.stringify(user.id) %>;
        console.log('üë§ Current user ID:', currentUserId, 'Type:', typeof currentUserId);
        let lastUpdateTime = new Date().toISOString();
        let updateInterval;

        document.addEventListener('DOMContentLoaded', function() {
            console.log('üìÑ DOM loaded');

            // –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã –ø–æ—Å—Ç–∞
            const showFormBtn = document.getElementById('show-post-form');
            const postForm = document.getElementById('post-form');
            const showFormBtnContainer = document.getElementById('show-post-form-btn');
            const cancelBtn = document.getElementById('cancel-post');
            const postContent = document.getElementById('post-content');
            const newPostIndicator = document.getElementById('new-post-indicator');
            const loadingSpinner = document.getElementById('loading-spinner');
            
            if (showFormBtn && postForm) {
                showFormBtn.addEventListener('click', function() {
                    postForm.style.display = 'block';
                    showFormBtnContainer.style.display = 'none';
                    postContent.focus();
                });
                
                cancelBtn.addEventListener('click', function() {
                    postForm.style.display = 'none';
                    showFormBtnContainer.style.display = 'block';
                    postContent.value = '';
                });
            }

            // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ AJAX
            const postFormElement = document.getElementById('new-post-form');
            if (postFormElement) {
                postFormElement.addEventListener('submit', async function(e) {
                    e.preventDefault();
                    
                    const content = postContent.value.trim();
                    console.log('üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞:', content);
                    
                    if (!content) {
                        postContent.focus();
                        postContent.classList.add('is-invalid');
                        return;
                    }

                    const submitBtn = document.getElementById('submit-post');
                    submitBtn.disabled = true;
                    submitBtn.textContent = '–ü—É–±–ª–∏–∫–∞—Ü–∏—è...';

                    try {
                        const response = await fetch(`/api/posts/${currentUserId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ content: content })
                        });

                        console.log('üì° –û—Ç–≤–µ—Ç –ø–æ—Å—Ç–∞:', response.status);
                        const result = await response.json();
                        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å—Ç–∞:', result);

                        if (result.success) {
                            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –ª–µ–Ω—Ç—É
                            addPostToFeed(result.post);
                            updatePostsCount();
                            
                            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
                            postForm.style.display = 'none';
                            showFormBtnContainer.style.display = 'block';
                            postContent.value = '';
                            postContent.classList.remove('is-invalid');
                            console.log('‚úÖ –ü–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω');
                        } else {
                            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:', result.error);
                            alert('–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: ' + result.error);
                        }
                    } catch (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:', error);
                        alert('–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞');
                    } finally {
                        submitBtn.disabled = false;
                        submitBtn.textContent = '–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å';
                    }
                });
            }

            // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –≤ –ª–µ–Ω—Ç—É
            function addPostToFeed(post) {
                const newsFeed = document.getElementById('news-feed');
                const emptyAlert = newsFeed.querySelector('.alert');
                
                if (emptyAlert) {
                    emptyAlert.remove();
                }

                const postElement = createPostElement(post);
                newsFeed.insertBefore(postElement, newsFeed.firstChild);
                
                // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
                postElement.style.opacity = '0';
                postElement.style.transform = 'translateY(-20px)';
                setTimeout(() => {
                    postElement.style.transition = 'all 0.5s ease';
                    postElement.style.opacity = '1';
                    postElement.style.transform = 'translateY(0)';
                }, 10);
            }

            // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ—Å—Ç–∞
            function createPostElement(post) {
                const postDiv = document.createElement('div');
                postDiv.className = 'post-card mb-3';
                postDiv.setAttribute('data-post-id', post.id);
                
                postDiv.innerHTML = `
                    <div class="card">
                        <div class="card-body">
                            <div class="user-info d-flex align-items-center mb-3">
                                <img src="${post.author.avatar || '<%= defaultAvatar %>'}" 
                                     class="user-avatar me-3" 
                                     alt="${post.author.name}">
                                <div>
                                    <h6 class="mb-0">${post.author.name}</h6>
                                    <small class="text-muted post-date">
                                        ${new Date(post.createdAt).toLocaleString('ru-RU')}
                                    </small>
                                </div>
                            </div>
                            <p class="mb-3 post-content">${post.content}</p>
                            <div class="d-flex gap-3">
                                <button class="btn btn-outline-primary btn-sm like-btn" 
                                        data-post-id="${post.id}">
                                    ü§ç <span class="likes-count">${post.likes || 0}</span>
                                </button>
                                <button class="btn btn-outline-secondary btn-sm comments-btn"
                                        data-post-id="${post.id}">
                                    üí¨ –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å
                                </button>
                            </div>
                            <div class="comments-section" id="comments-${post.id}" style="display: none;">
                                <div class="comments-list mb-2">
                                    <div class="text-muted">–ü–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</div>
                                </div>
                                <div class="input-group">
                                    <input type="text" class="form-control comment-input" 
                                           placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..."
                                           data-post-id="${post.id}">
                                    <button class="btn btn-primary add-comment" 
                                            data-post-id="${post.id}">
                                        –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;

                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
                const likeBtn = postDiv.querySelector('.like-btn');
                const commentsBtn = postDiv.querySelector('.comments-btn');
                const addCommentBtn = postDiv.querySelector('.add-comment');
                const commentInput = postDiv.querySelector('.comment-input');

                likeBtn.addEventListener('click', function() {
                    handleLikePost(post.id, likeBtn);
                });

                commentsBtn.addEventListener('click', function() {
                    const commentsSection = document.getElementById(`comments-${post.id}`);
                    if (commentsSection.style.display === 'block') {
                        commentsSection.style.display = 'none';
                        this.textContent = 'üí¨ –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å';
                    } else {
                        commentsSection.style.display = 'block';
                        this.textContent = 'üìù –°–∫—Ä—ã—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏';
                        commentInput.focus();
                    }
                });

                addCommentBtn.addEventListener('click', function() {
                    const comment = commentInput.value.trim();
                    if (comment) {
                        handleAddComment(post.id, comment, commentInput);
                    }
                });

                commentInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        addCommentBtn.click();
                    }
                });

                return postDiv;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–∞
            async function handleLikePost(postId, likeBtn) {
                console.log('‚ù§Ô∏è –õ–∞–π–∫ –ø–æ—Å—Ç–∞:', postId, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', currentUserId);
                try {
                    const response = await fetch(`/api/posts/${postId}/like?userId=${currentUserId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    });

                    console.log('üì° –û—Ç–≤–µ—Ç –ª–∞–π–∫–∞:', response.status);
                    const result = await response.json();
                    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ª–∞–π–∫–∞:', result);

                    if (result.success) {
                        const likesCount = likeBtn.querySelector('.likes-count');
                        likesCount.textContent = result.likes;
                        
                        // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
                        if (result.liked) {
                            likeBtn.classList.add('liked');
                            likeBtn.innerHTML = `‚ù§Ô∏è <span class="likes-count">${result.likes}</span>`;
                            console.log('‚úÖ –õ–∞–π–∫ –¥–æ–±–∞–≤–ª–µ–Ω');
                        } else {
                            likeBtn.classList.remove('liked');
                            likeBtn.innerHTML = `ü§ç <span class="likes-count">${result.likes}</span>`;
                            console.log('‚úÖ –õ–∞–π–∫ —É–±—Ä–∞–Ω');
                        }
                        
                        // –ê–Ω–∏–º–∞—Ü–∏—è –ª–∞–π–∫–∞
                        likeBtn.style.transform = 'scale(1.2)';
                        setTimeout(() => {
                            likeBtn.style.transform = 'scale(1)';
                        }, 200);
                    } else {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –ª–∞–π–∫–∞:', result.error);
                        alert('–û—à–∏–±–∫–∞ –ª–∞–π–∫–∞: ' + result.error);
                    }
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ª–∞–π–∫–∞:', error);
                    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∞–π–∫–∞');
                }
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            async function handleAddComment(postId, comment, commentInput) {
                console.log('üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É:', postId, '—Ç–µ–∫—Å—Ç:', comment);
                try {
                    const response = await fetch(`/api/posts/${postId}/comments`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            userId: currentUserId,
                            content: comment
                        })
                    });

                    console.log('üì° –û—Ç–≤–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', response.status);
                    const result = await response.json();
                    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', result);

                    if (result.success) {
                        addCommentToPost(postId, result.comment);
                        commentInput.value = '';
                        console.log('‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω');
                    } else {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', result.error);
                        alert('–û—à–∏–±–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: ' + result.error);
                    }
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
                    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');
                }
            }

            // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            function addCommentToPost(postId, comment) {
                const commentsList = document.querySelector(`#comments-${postId} .comments-list`);
                if (commentsList) {
                    // –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"
                    if (commentsList.querySelector('.text-muted')) {
                        commentsList.innerHTML = '';
                    }

                    const commentDiv = document.createElement('div');
                    commentDiv.className = 'comment mb-2';
                    commentDiv.innerHTML = `
                        <strong>${comment.author.name}:</strong> ${comment.content}
                        <small class="text-muted ms-2">
                            ${new Date(comment.createdAt).toLocaleString('ru-RU')}
                        </small>
                    `;
                    
                    commentsList.appendChild(commentDiv);
                    
                    // –ê–Ω–∏–º–∞—Ü–∏—è
                    commentDiv.style.opacity = '0';
                    commentDiv.style.transform = 'translateY(-10px)';
                    setTimeout(() => {
                        commentDiv.style.transition = 'all 0.3s ease';
                        commentDiv.style.opacity = '1';
                        commentDiv.style.transform = 'translateY(0)';
                    }, 10);
                }
            }

            // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ—Å—Ç–æ–≤
            function updatePostsCount() {
                const postsCount = document.getElementById('posts-count');
                const currentCount = parseInt(postsCount.textContent) || 0;
                postsCount.textContent = currentCount + 1 + ' –∑–∞–ø–∏—Å–µ–π';
            }

            // –õ–∞–π–∫–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤
            document.querySelectorAll('.like-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const postId = this.dataset.postId;
                    handleLikePost(postId, this);
                });
            });
            
            // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤
            document.querySelectorAll('.comments-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const postId = this.dataset.postId;
                    const commentsSection = document.getElementById(`comments-${postId}`);
                    
                    if (commentsSection.style.display === 'block') {
                        commentsSection.style.display = 'none';
                        this.textContent = 'üí¨ –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å';
                    } else {
                        commentsSection.style.display = 'block';
                        this.textContent = 'üìù –°–∫—Ä—ã—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏';
                        commentsSection.querySelector('.comment-input').focus();
                    }
                });
            });
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤
            document.querySelectorAll('.add-comment').forEach(btn => {
                btn.addEventListener('click', function() {
                    const postId = this.dataset.postId;
                    const input = document.querySelector(`.comment-input[data-post-id="${postId}"]`);
                    const comment = input.value.trim();
                    
                    if (comment) {
                        handleAddComment(postId, comment, input);
                    }
                });
            });
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ Enter –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤
            document.querySelectorAll('.comment-input').forEach(input => {
                input.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        const postId = this.dataset.postId;
                        document.querySelector(`.add-comment[data-post-id="${postId}"]`).click();
                    }
                });
            });
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –ø–æ—Å—Ç–∞
            postContent.addEventListener('input', function() {
                this.classList.remove('is-invalid');
            });

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            updateInterval = setInterval(checkForUpdates, 10000);

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
            newPostIndicator.addEventListener('click', function() {
                loadingSpinner.style.display = 'block';
                location.reload();
            });
        });

        // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        async function checkForUpdates() {
            try {
                const response = await fetch(`/api/posts/check-updates/${currentUserId}?lastUpdate=${lastUpdateTime}`);
                const result = await response.json();

                if (result.hasUpdates) {
                    document.getElementById('new-post-indicator').style.display = 'block';
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
            }
        }

        // –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.addEventListener('beforeunload', function() {
            if (updateInterval) {
                clearInterval(updateInterval);
            }
        });
    </script>
</body>
</html>